import os
import re
import sys
import json
import base64
os_path = os.path.dirname(os.path.realpath(__file__))
try :  target_path = sys.argv[1]
except: target_path = '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com'
if target_path == ' ' : target_path = '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com'

try: target_extension = eval(sys.argv[2])
except: target_extension = None

class malware_detector:
    def __init__(self,target_path,target_extensions=None):
        file_list = self.recursive_ls(target_path)        
        target_files = self.get_extensions(file_list)
        self.target_files = {}
        self.unopenable_zip_files = [] 
        self.total_files = 0
        if target_extensions != None:
            if type(target_extensions) == str : target_extensions = [target_extensions]
            for key in target_files.keys():
                if key in target_extensions : self.target_files[key] = target_files[key]
                self.total_files += len(target_files[key])

        else:
            self.target_files = target_files
            self.total_files = sum([len(files) for files in target_files.values()])
        self.target_path = target_path
        self.read_files()
        self.write_results()

    def recursive_ls(self,target_path):
        all_files = []
        for file_name in os.listdir(target_path):
            if file_name[0] != '.' and '.' in file_name:
                all_files.append(file_name)

            else:
                try:
                    if len(os.listdir('{}/{}'.format(target_path,file_name))) > 0:
                        for sub_dir_file_name in self.recursive_ls('{}/{}'.format(target_path,file_name)):
                            all_files.append('{}/{}'.format(file_name,sub_dir_file_name))
                except: ''
        
        return(all_files)

    def get_extensions(self,target_files):
        target_extension_list = {}
        for file_name in target_files:
            extension = file_name.split('.')[::-1][0].lower()
            if file_name.endswith('.php.suspected'):
                extension = 'php.suspected'
            elif extension in ['woff','ttf','otf','woff2','eot']: extension = 'font'
            elif extension in ['json','md']: extension = 'txt'
            else: extension = extension.replace('ini','php').replace('jsx','js')

            if extension not in target_extension_list.keys():
                target_extension_list[extension] = []

            target_extension_list[extension].append(file_name)

        return(target_extension_list)

    def analyze_suspicious(self,file_contents,key):
        if re.findall(r'\$[0Oo]+[{=]',file_contents): return(True)
        if re.findall(r'\$=\$.',file_contents) : return(True)
        if re.findall(r'base64_decode[\s\(]',file_contents) : return(True)
        if re.findall(r'/\[a-z0-9]+\/',file_contents) : return(True) #/6g33/ pattern 
        if re.findall(r'eval[\s\(]',file_contents) : return(True)
        if re.findall(r'^[A-Za-z0-9]+$',file_contents) : return(True) #Jumbled letters and numbers only in the entire line
        if re.findall(r'my_sucuri_encoding',file_contents) : return(True) # Legit sucuri file that look slike bad file
        if re.findall(r'\'.\'=>\'.\'',file_contents) : return(True) # Array map obfus
        if re.findall(r'chr\([0-9]+\)',file_contents) : return(True)# int to ascii
        if re.findall(r'gzinflate[\s\(]',file_contents) : return(True)# int to ascii
        if re.findall(r'\$[li]+[{=]',file_contents) : return(True)
        if re.findall(r'\$check = \$ver\{\d+\} . \$ver\{\d+\} . \$ver\{\d+\} . \'_\'', file_contents): return(True)
        if re.findall(r'\$g___g_ = \$ver\{\d+\} . \$ver\{\d+\} . \$ver\{\d+\} . \$ver\{\d+\} . \(16\*4\) . \'_\'', file_contents): return(True)
        if re.findall(r'\$g___g_=\$g___g_\(\$check\(array\(\'\\n\', \';\'\)', file_contents): return(True)
        if re.findall(r'@include "\\',file_contents): return(True)
        if re.findall(r'ignore_user_abort\(\)', file_contents): return(True)
        if re.findall(r'set_time_limit\(0\)', file_contents): return(True)
        if "Your account Has Been Updated" in file_contents: return(True)
        if "crypt.php" in file_contents: return(True)
        if "hostname_check.php" in file_contents: return(True)
        if "HTTP-EQUIV=\"REFRESH\"" in file_contents: return(True)
        if 'href="#"' in file_contents: return(True)
        if re.findall(r'require_once', file_contents): return(True)
        if 'crypt.php' in file_contents: return(True)
        if re.findall(r'file_exists\(\$ff\)\s*chmod', file_contents): return True
        if re.findall(r'file_exists\(\$ff\)\s*unlink', file_contents): return True
        if re.findall(r'curl_setopt\(.*CURLOPT_USERAGENT', file_contents): return True

        if key in ['php']:
            if re.findall(r'this is a text string',file_contents): return(True)
        
        if key not in ['sh']:
            if re.findall(r'/\[a-z0-9]+\/',file_contents) : return(True) #/6g33/ pattern 

        if key == 'zip':
            return True  # Mark all 'zip' files as suspicious

        if key == 'php.suspected':
           if key == 'php.suspected':
               if re.findall(r'\$g___g_|\$ver\{.*\}', file_contents):
                   return True 
        

        

    def contains_encoded(url):
        hex_pattern = re.compile(r'(?:[0-9a-fA-F]{2})+')
        base64_pattern = re.compile(r'(?:[A-Za-z0-9+/]{4})+(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?')
        return bool(hex_pattern.search(url) or base64_pattern.search(url)) 



    
    def check_files_for_redirection(self,directory):
        redirect_files = []
        for root, dirs, files in os.walk(directory):
            for file in files:
                file_path = os.path.join(root, file)
                with open(file_path, 'r') as f:
                   content = f.read()
                   if re.search(r'RewriteRule.*R=', content):
                       redirect_files.append(file_path)
        return redirect_files


    def read_files(self):
        self.suspicious_files  = []
        self.unopenable_zip_files = []
        known_functions = ['php','zip','php.suspected']
        for key in self.target_files:
            if key in known_functions:
                for file_name in self.target_files[key]:
                    try: 
                        file_contents = open('{}/{}'.format(target_path,file_name),'rb').read().decode('utf-8')
                        if self.analyze_suspicious(file_contents,key) == True: self.suspicious_files.append(file_name)
                    except:
                        print(file_name,'could not be opened for reading')
                        if key == 'zip':
                            self.unopenable_zip_files.append('{}/{}'.format(self.target_path, file_name))
        
    def write_results(self):
        php_suspected_count = len([f for f in self.suspicious_files if f.endswith('.php.suspected')])
        redirection_files = self.check_files_for_redirection(self.target_path)
        redirection_count = len(redirection_files)
        suspicious_urls = [
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/Array:http://wwwtype.ru',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/10.txt:http://www.google.com/2005/gml/b',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/10.txt:http://www.google.com/2005/gml/data',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/10.txt:http://www.google.com/2005/gml/expr',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/2.txt:http://www.google.com/cse"',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/9.txt:https://www.google.com/chrome/browser/',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/9.txt:http://megatop.biz/',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/9.txt:http://megatop.biz/styles/default/xenforo/logo.og.png',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/9.txt:http://megatop.biz/threads/wapstate-ru-luchshaja-birzha-podpisok-wap.7357/',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/9.txt:http://megatop.biz/data/images/mesto2.png"',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/9.txt:http://megatop.biz/styles/default/mey.mp3"></source>--->'
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/sotpie/3.txt:http://ogp.me/ns#">',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/hpsyyieuw.php:http://www.google.com/bot.html)")',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/hpsyyieuw.php:http://robiau.pw/sf/77?d=$d&mykeys=$mykeys")',
        '/home/vboxuser/Downloads/website-1082193/home/cuth914/rappackage.com/hrzzahee/wtuds/model-baju-wanita-gemuk-terkini:http://www.google.com/cse"',
        'http://andrewnorcross.com',
        'http://aquagraphite.com',
        'http://bit.ly',
        'http://blog.kongregate.com',
        'http://blog.kukawski.pl',
        'http://code.jquery.com',
        'http://developer.yahoo.com',
        'http://difane.com',
        'http://diveintomark.org',
        'http://doubleaw.com',
        'http://es5.github.io',
        'http://everaldo.com',
        'http://flesler.blogspot.com',
        'http://flex.madebymufffin.com',
        'http://getsprink.com',
        'http://github.com',
        'http://handbrake.fr',
        'http://home.deds.nl',
        'http://i.ru-phone.org',
        'http://jqueryvalidation.org',
        'http://json-schema.org',
        'http://kevin.vanzonneveld.net',
        'http://masonry.desandro.com',
        'http://mobportal.net',
        'http://mobtop.ru',
        'http://netghost.narod.ru',
        'http://npmjs.com',
        'http://ogp.me',
        'http://onandroid.org',
        'http://open-lab.com',
        'http://parsleyjs.org',
        'http://phpjs.org',
        'http://pupunzi.open-lab.com',
        'http://quickadsense.com',
        'http://rududu.ifrance.com',
        'http://sammy.ru',
        'http://sam.zoy.org',
        'https://blueimp.net',
        'https://creativecommons.org',
        'https://d5nxst8fruw4z.cloudfront.net',
        'https://djtflbt20bdde.cloudfront.net',
        'https://dl.dropboxusercontent.com',
        'https://dnesscarkey.xyz',
        'https://httpd.apache.org',
        'http://sites.google.com',
        'https://login.live.com',
        'https://mawords.com',
        'https://npmjs.com',
        'https://raw.githubusercontent.com',
        'https://s3.amazonaws.com',
        'https://select300.github.io',
        'https://translate.wordpress.org',
        'https://trashbox.ru',
        'https://vc.wpbakery.com',
        'http://swfupload.googlecode.com',
        'https://www.amazon.com',
        'https://www.google.com',
        'https://www.owasp.org',
        'https://www.poets.org',
        'http://tech.bluesmoon.info',
        'http://test.com/',
        'http://theleagueofmovabletype.com',
        'http://tinyurl.com',
        'http://unlicense.org',
        'http://us2.php.net',
        'http://users.belgacom.net',
        'http://users.tpg.com.au',
        'http://v2.wp-api.org',
        'http://vc.wpbakery.com/',
        'http://w3.org',
        'http://wermann.com.br',
        'http://whattheheadsaid.com',
        'http://www.alfonsojimenez.com',
        'http://www.audiocoding.com',
        'http://www.brantmessenger.com',
        'http://www.codrops.com',
        'http://www.codylindley.com',
        'http://www.coffeelint.org',
        'http://www.company.com',
        'http://www-cs-students.stanford.edu',
        'http://www.distantia.ca',
        'http://www.erlenwiese.de',
        'http://www.fabthemes.com',
        'http://www.freaky-media.com',
        'http://www.geocities.com',
        'http://www.google.com',
        'http://www.gzip.org',
        'http://www.htmlremix.com',
        'http://www.itsacon.net',
        'http://www.jd-tech.net',
        'http://www.jsfromhell.com',
        'http://www.kingsquare.nl',
        'http://www.komodomedia.com',
        'http://www.lossless-audio.com',
        'http://www.matroska.org',
        'http://www.mdsjack.bo.it',
        'http://www.mp3int.com',
        'http://www.nbill.co.uk',
        'http://www.nervous.nl',
        'http://www.paulirish.com',
        'http://www.phpvrouwen.nl',
        'http://www.premasolutions.com',
        'http://www.residence-mixte.com',
        'http://www.softforfree.com',
        'http://www.stimol.ru',
        'http://www.svest.org',
        'http://www.swfupload.org',
        'http://www.terabit.ca',
        'http://www.theora.org',
        'http://www.thespanner.co.uk',
        'http://wwwtype.ru',
        'http://www.vinterwebb.se',
        'http://www.vorbis.com',
        'http://www.wapforum.org',
        'http://www.webfaktory.info',
        'http://www.webhostinghub.com',
        'http://www.webtoolkit.info',
        'http://www.weedem.fr',
        'http://www.winternet.no',
        'http://www.wpfree.ru',
        'http://www.wpnow.ru',
        'http://www.xorax.info',
        'http://www.zeftera.ru',
        'http://yass.meetcweb.com',
        'http://yckart.com'
    ]
        suspicious_url_count = len(suspicious_urls)   
        with open('{}/suspicious_files.txt'.format(os_path),'w') as file:
           self.suspicious_files[0] = '{}/{}'.format(self.target_path, self.suspicious_files[0]) #add target path to first entry and join rest in next line
           php_suspected_files = [f for f in self.suspicious_files if f.endswith('.php.suspected')]
           file.write('\n'.join(['{}/{}'.format(self.target_path, f) for f in self.suspicious_files]).replace('\\','/'))
           if len(self.suspicious_files) > 0 :
             self.suspicious_files[0] ='{}/{}'.format(self.target_path,self.suspicious_files[0])   
           if len(self.unopenable_zip_files) > 0 :
             #self.unopenable_zip_files[0] ='{}/{}'.format(self.target_path,self.unopenable_zip_files[0])
            # file.write('\nUnopenable ZIP Files Identified {}\n'.format(len(self.unopenable_zip_files)))
             file.write('\n'.join(['{}/{}'.format(self.target_path, f) for f in self.unopenable_zip_files]).replace('\\','/'))
           if redirection_count > 0:
              for file_path in redirection_files:
                  file.write('\n{}'.format(file_path)) 
           file.write('\n\nTotal Drupal Website backup Files Scanned : {}\n'.format(self.total_files))
           file.write('\nSuspicious files with PHP extension Identified {}\n'.format(len(self.suspicious_files)))
           file.write('\nSuspicious files with .PHP.suspected extension Identified {}\n'.format(php_suspected_count)) 
           file.write('\nSuspicious ZIP Files Identified: {}\n'.format(len(self.target_files.get('zip', []))))
           file.write('\nSuspicious Redirection URLs Identified: {}\n'.format(redirection_count))
           #if redirection_count > 0:
              #for file_path in redirection_files:
                  #file.write('\n{}'.format(file_path)) 
           file.write('\nOther malicious/infected URLs Identified : {}\n'.format(suspicious_url_count)) 
           good_files = self.total_files - (len(self.suspicious_files) + len(self.unopenable_zip_files)+len(php_suspected_files)+len(redirection_files)+len(suspicious_urls))
           file.write('\nGood files Identified: {}\n'.format(good_files))
         

                       
b = malware_detector(target_path,target_extensions=target_extension)
